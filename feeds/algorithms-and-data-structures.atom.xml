<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ordinary Days</title><link href="http://alrightchiu.github.io/SecondRound/" rel="alternate"></link><link href="http://alrightchiu.github.io/SecondRound/feeds/algorithms-and-data-structures.atom.xml" rel="self"></link><id>http://alrightchiu.github.io/SecondRound/</id><updated>2015-12-14T09:27:00+08:00</updated><entry><title>樹(Tree)</title><link href="http://alrightchiu.github.io/SecondRound/shu-tree.html" rel="alternate"></link><updated>2015-12-14T09:27:00+08:00</updated><author><name>Chiu CC</name></author><id>tag:alrightchiu.github.io,2015-12-14:SecondRound/shu-tree.html</id><summary type="html">&lt;p&gt;先備知識：指標(pointer)與連結串列(Linked List)&lt;/p&gt;
&lt;p&gt;樹(Tree)是用以描述具有階層結構(hierarchical structure)的問題的首選，階層結構意味著明確的先後次序，例如，若要印出ABC三個字母的所有排列組合(permutation)，直覺反射的圖像會是：&lt;/p&gt;
&lt;p&gt;&lt;center&gt; &lt;img alt="圖一" src="https://github.com/alrightchiu/SecondRound/master/content/fig/tree/abc_permu1.png" /&gt; &lt;/center&gt;
&lt;center&gt;圖一：ABC字母排列組合 &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;img alt="圖一" src="https://github.com/alrightchiu/SecondRound/master/content/fig/tree/abc_permu1.png" /&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;圖一：ABC字母排列組合&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;圖一的邏輯為：從起點(R)開始，先決定第一個字母，再依序決定第二、第三個字母，並且，在每一次選擇字母時，可能有不止一個可供選擇的字母。最後一共走出六條路徑，得到六種排列組合。若將起點(R)視為樹根(root)，每一個字母選擇的狀態(例如：A、C、BC、CAB)都視為一個節點(node)，這樣的結構便能夠視為一棵樹。&lt;/p&gt;
&lt;p&gt;更精確一點，以下列出兩種樹的定義：&lt;br /&gt;
A. &lt;strong&gt;樹&lt;/strong&gt;是由一個或多個節點所組成的有限集合，並且滿足：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存在且只有一個稱為樹根(root)的節點；&lt;/li&gt;
&lt;li&gt;其餘的節點可以分割成任意正整數個(包含零個)互斥(disjoint)的集合：T&lt;sub&gt;1&lt;/sub&gt;、...、T&lt;sub&gt;n&lt;/sub&gt;，其中每一個集合也都滿足樹的定義，這些集合又稱為這棵樹的&lt;strong&gt;子樹&lt;/strong&gt;(subtree)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;B. &lt;strong&gt;樹&lt;/strong&gt;是由一個或多個節點(nodes/vertices)以及邊緣(edge)所組成，而且沒有循環(cycle)的資料結構。&lt;/p&gt;
&lt;p&gt;根據以上定義，便能判斷下列四種結構中，a、b可以視為樹，而c、d則否：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;圖二&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt="圖二.a" src="is_Tree_a.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;a：樹的節點只有指向左子樹與右子樹時，又稱為二元樹(Binary Tree)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt="圖二.b" src="is_Tree_b.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b：當樹退化成連結串列(linked list)時，仍滿足樹的定義。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt="圖二.c" src="is_Not_Tree_c.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;c：在F出現循環(cycle)；C-&amp;gt;B-&amp;gt;D-&amp;gt;E出現無向循環(undirected cycle)。後者等價於：D有兩個parent node。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt="圖二.d" src="is_Not_Tree_d.png" /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;d：一棵樹只能有一個樹根(root)。此圖像又稱為樹林(forest)。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;// 接著： 眾多名詞定義，再一張圖&lt;/p&gt;
&lt;p&gt;// 樹的特徵：
樹中找特定節點一定只有一條路徑&lt;/p&gt;
&lt;p&gt;// 集合關係&lt;/p&gt;
&lt;p&gt;// 圖要再做張比較小的, 不然就學怎麼調size(後者比較實際)&lt;/p&gt;</summary><category term="今天不寫明天就忘了"></category></entry></feed>